class ResidualBlock(nn.Cell):
    """
    ResNet V1 residual block definition.
    Args:
        in_channel (int): Input channel.
        out_channel (int): Output channel.
        stride (int): Stride size for the first convolutional layer. Default: 1.
    Returns:
        Tensor, output tensor.
    Examples:
        >>> ResidualBlock(3, 256, stride=2)
    """
 
    expansion = 4
    def __init__(self,in_channel,out_channel,stride=1):
        super(ResidualBlock, self).__init__()
        channel = out_channel // self.expansion
 
        self.conv1 = _conv1x1(in_channel, channel, stride=1)
        self.bn1 = _bn(channel)
 
        self.conv2 = _conv3x3(channel, channel, stride=stride)
        self.bn2 = _bn(channel)
 
        self.conv3 = _conv1x1(channel, out_channel, stride=1)
        self.bn3 = _bn_last(out_channel)
 
        self.relu = nn.ReLU()
        self.down_sample = False
 
        if stride != 1 or in_channel != out_channel:
            self.down_sample = True
        self.down_sample_layer = None
 
        if self.down_sample:
            self.down_sample_layer = nn.SequentialCell([_conv1x1(in_channel, out_channel,stride),_bn(out_channel)])
        self.add = P.TensorAdd()
 
    def construct(self, x):
        identity = x
 
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)
        out = self.conv3(out)
        out = self.bn3(out)
 
        if self.down_sample:
            identity = self.down_sample_layer(identity)
 
        out = self.add(out, identity)
        out = self.relu(out)
 
        return out
        
        import mindspore.dataset.engine as de
ds = de.ImageFolderDatasetV2(dataset_path, num_parallel_workers=8, shuffle=True)

trans = [
C.RandomCropDecodeResize(image_size, scale=(0.08, 1.0), ratio=(0.75, 1.333)),
C.RandomHorizontalFlip(prob=0.5),
C.Normalize(mean=mean, std=std),
     C.HWC2CHW()
]
ds = ds.map(input_columns="image", num_parallel_workers=12, operations=trans)

шонч╗Г
context.set_context(mode=context.GRAPH_MODE, device_target="Ascend", save_graphs=False)

dataset = create_dataset(dataset_path=args_opt.dataset_path, do_train=True, repeat_num=config.epoch_size, batch_size=config.batch_size, target=target)
net = resnet(class_num=config.class_num)

dataset = create_dataset(dataset_path=args_opt.dataset_path, do_train=True, repeat_num=config.epoch_size, batch_size=config.batch_size, target=target)
net = resnet(class_num=config.class_num)
config_ck = CheckpointConfig(save_checkpoint_steps=config.save_checkpoint_epochs * step_size,keep_checkpoint_max=config.keep_checkpoint_max)
ckpt_cb = ModelCheckpoint(prefix="resnet", directory=ckpt_save_dir, config=config_ck)

dataset = create_dataset(dataset_path=dataset_path, do_train=False, batch_size=config.batch_size,target="Ascend")
net = resnet(class_num=config.class_num)
param_dict = load_checkpoint(args_opt.checkpoint_path)
load_param_into_net(net, param_dict)
net.set_train(False)
loss = SoftmaxCrossEntropyWithLogits(sparse=True, reduction='mean')
model = Model(net, loss_fn=loss, metrics={'top_1_accuracy', 'top_5_accuracy'})
res = model.eval(dataset)
